COMPONENTES : 

1) Siempre arrancan en mayuscula
2) No se puede repetir nombre de componente
3) Los componentes son funciones 
4) Los componentes deben retornar
5) Los componentes solo retornan una unica cosa
6) Pueden recibir props y son de solo-lectura
7) Pueden tener un estado interno 
8) Si el estado de un componente o sus props cambian de valor, el componente se vuelve a renderizar (se reejecuta toda la funcion)


function foo() {}

const foo = () => {}

class foo {}


DESTRUCTURING : 

const arr = [1,2,3]

const [uno,dos,tres] = arr

const uno = arr[0]
const dos = arr[1]
const tres = arr[2]




const obj = {a:1, b:2, c:3}

const {a:a,b:b,c:c} = obj
const {a,b,c} = obj

const a = obj.a
const b = obj.b
const c = obj.c



OBJECT PROPERTY SHORTHAND : 

    { prop : prop } === { prop }




STATE : son variables internas de un componente que se mantienen a travez de ejecucion y nos dan reactividad


HOOKS : son funciones que se ejecutan en un componente y le dan una nueva funcionalidad. No todos tienen retorno ni obligatoriamente tienen parametros


    Hooks de estado : 

        - useState() : Retorna un array con dos elementos, el estado y una funcion para actualizarlo
        - useReducer()
        - useRef()


    Hook de efecto : 

        - useEffect() : Te permite hacer un efecto secundario









class App extends React.Component {

    constructor() {}

    componentDidMount() {}
    
    componentWillMount(){}

    componentWillUnmount() {}

    shouldComponentUpdate() {}

    render() {}

}



Promesa = Es un objeto que representa una operacion que dura en el tiempo



const promesa = new Promise((res,rej)=>{
    
    setTimeout(()=>{
        res(["juan","carlos"])
    },2000)

})

promesa.then((usuarios)=>{  console.log(usuarios)  })

promesa.catch(()=>{  console.log("Termino la promesa mal")  })





setTimeout(()=>{

},2000)




const promesa = new Promise((resolver,rechazar)=>{

    const usuarios = [{nombre:'Juan'},{nombre:'Pedro'}]
    const resultado = true

    //resolver()
    //rechazar()

})


    promesa
    .then(()=>{

    })
    .catch(()=>{

    })



1 - El componente arranca
1.5 - Arrancar con un estado inicial de productos vacios
2 - Se dibuja por primera vez
3 - Hago un efecto
4 - Simulo el pedido
5 - Obtenes los productos
6 - Actualizo el estado
7 - Redibujo
8 - No tengo que volver a pedir los usuarios